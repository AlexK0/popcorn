
syntax = "proto3";

option go_package = "github.com/AlexK0/popcorn/internal/api/popcorn";

package popcorn;

service CompilationService {
    // Compilation api
    rpc StartCompilationSession(StartCompilationSessionRequest) returns (StartCompilationSessionReply) {}
    rpc SendFileSHA256(SendFileSHA256Request) returns (SendFileSHA256Reply) {}
    rpc TransferFile(stream TransferFileStream) returns (TransferFileReply) {}
    rpc CompileSource (CompileSourceRequest) returns (CompileSourceReply) {}
    rpc CloseSession(CloseSessionRequest) returns (CloseSessionReply) {}

    // Service api
    rpc Status(StatusRequest) returns (StatusReply) {}
}

message SHA256Message {
    fixed64 B0_7 = 1;
    fixed64 B8_15 = 2;
    fixed64 B16_23 = 3;
    fixed64 B24_31 = 4;
}

message FileMetadata {
    string FilePath = 1;
    int64 MTime = 2;
}

message StartCompilationSessionRequest {
    SHA256Message UserID = 1;
    string UserName = 2;
    string SourceFilePath = 3;
    string Compiler = 4;
    repeated string CompilerArgs = 5;
    repeated FileMetadata RequiredHeaders = 6;
    bool UseObjectCache = 7;
}

message StartCompilationSessionReply {
    uint64 SessionID = 1;
    repeated int32 MissedHeadersSHA256 = 2;
    repeated int32 MissedHeadersFullCopy = 3;
}

message SendFileSHA256Request {
    uint64 SessionID = 1;
    int32 HeaderIndex = 2;
    SHA256Message HeaderSHA256 = 3;
}

message SendFileSHA256Reply {
    bool FullCopyRequired = 1;
}

message TransferFileStream {
    message StreamHeader {
        uint64 SessionID = 1;
        int32 HeaderIndex = 2;
    }
    oneof Chunk {
        StreamHeader Header = 1;
        bytes FileBodyChunk = 2;
    }
}

message TransferFileReply {
}

message CompileSourceRequest {
    uint64 SessionID = 1;
    bytes SourceBody = 2;
    bool CloseSessionAfterBuild = 3;
}

message CompileSourceReply {
    int32 CompilerRetCode = 1;
    bytes CompiledSource = 2;
    bytes CompilerStdout = 3;
    bytes CompilerStderr = 4;
}

message CloseSessionRequest {
    uint64 SessionID = 1;
}

message CloseSessionReply {
}

message StatusRequest {}

message StatusReply {
    string ServerVersion = 1;
    repeated string ServerArgs = 2;
    bytes ServerStats = 3;
}
