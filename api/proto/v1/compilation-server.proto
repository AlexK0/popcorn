
syntax = "proto3";

option go_package = "github.com/AlexK0/popcorn/internal/api/popcorn";

package popcorn;

service CompilationService {
    // Compilation api
    rpc StartCompilationSession(StartCompilationSessionRequest) returns (StartCompilationSessionReply) {}
    rpc SendHeaderSHA256(SendHeaderSHA256Request) returns (SendHeaderSHA256Reply) {}
    rpc SendHeader(SendHeaderRequest) returns (SendHeaderReply) {}
    rpc CompileSource (CompileSourceRequest) returns (CompileSourceReply) {}
    rpc CloseSession(CloseSessionRequest) returns (CloseSessionReply) {}

    // Service api
    rpc Status(StatusRequest) returns (StatusReply) {}
    rpc UpdateServer(UpdateServerRequest) returns (UpdateServerReply) {}
    rpc RestartServer(RestartServerRequest) returns (RestartServerReply) {}
    rpc DumpServerLog(DumpServerLogRequest) returns (DumpServerLogReply) {}
}

message SHA256Message {
    fixed64 B0_B7 = 1;
    fixed64 B8_B15 = 2;
    fixed64 B16_B23 = 3;
    fixed64 B24_B31 = 4;
}

message HeaderMetadata {
    string FilePath = 1;
    int64 MTime = 2;
}

message StartCompilationSessionRequest {
    SHA256Message UserID = 1;
    string SourceFilePath = 2;
    string Compiler = 3;
    repeated string CompilerArgs = 4;
    repeated HeaderMetadata RequiredHeaders = 5;
}

message StartCompilationSessionReply {
    uint64 SessionID = 1;
    repeated int32 MissedHeadersSHA256 = 2;
    repeated int32 MissedHeadersFullCopy = 3;
}

message SendHeaderSHA256Request {
    uint64 SessionID = 1;
    int32 HeaderIndex = 2;
    SHA256Message HeaderSHA256 = 3;
}

message SendHeaderSHA256Reply {
    bool FullCopyRequired = 1;
}

message SendHeaderRequest {
    uint64 SessionID = 1;
    int32 HeaderIndex = 2;
    bytes HeaderBody = 3;
}

message SendHeaderReply {
}

message CompileSourceRequest {
    uint64 SessionID = 1;
    bytes SourceBody = 2;
    bool CloseSessionAfterBuild = 3;
}

message CompileSourceReply {
    int32 CompilerRetCode = 1;
    bytes CompiledSource = 2;
    bytes CompilerStdout = 3;
    bytes CompilerStderr = 4;
}

message CloseSessionRequest {
    uint64 SessionID = 1;
}

message CloseSessionReply {
}

message StatusRequest {}

message StatusReply {
    string ServerVersion = 1;

    uint64 CPUsCount = 2;
    uint64 ActiveGoroutinesCount = 3;
    uint64 ClientsCount = 4;

    uint64 SystemHeadersUsedCount = 5;
    uint64 CachedHeaderOnDiskCount = 6;
    uint64 CachedHeaderOnDiskBytes = 7;

    uint64 HeapAllocBytes = 8;
    uint64 SystemAllocBytes = 9;

    uint64 UptimeNanoseconds = 10;
}

message UpdateServerRequest {
    bytes NewBinary = 1;
    string Password = 2;
}

message UpdateServerReply {
}

message RestartServerRequest {
    string Password = 1;
}

message RestartServerReply {
}

message DumpServerLogRequest {
    string Password = 1;
    uint64 BytesLimit = 2;
}

message DumpServerLogReply {
    bytes LogData = 1;
}
